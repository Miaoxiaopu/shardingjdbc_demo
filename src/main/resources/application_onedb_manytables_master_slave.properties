# ==========================================单库分表+主从读写分离=========================================================
# 和单库分表一样，只是增加了slave的配置以及配置master和slave的关系
# 根据分表策略master写到哪个表，根据分表策略slave读哪个表
# 1主1从
# ======================================================================================================================

#默认数据源
spring.shardingsphere.sharding.default-data-source-name=master
#数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names=master1,slave1
#数据源1
spring.shardingsphere.datasource.master1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.master1.url=jdbc:mysql://192.168.116.131:7786/filedb1?useUnicode\=true&characterEncoding\=utf-8&useSSL\=false&serverTimezone\=GMT&allowPublicKeyRetrieval\=true
spring.shardingsphere.datasource.master1.username=user1
spring.shardingsphere.datasource.master1.password=root
#数据源2
spring.shardingsphere.datasource.slave1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.slave1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.slave1.url=jdbc:mysql://192.168.116.132:7786/filedb1?useUnicode\=true&characterEncoding\=utf-8&useSSL\=false&serverTimezone\=GMT&allowPublicKeyRetrieval\=true
spring.shardingsphere.datasource.slave1.username=user1
spring.shardingsphere.datasource.slave1.password=root


#数据源之间主从关系方式1(适合一主多从、多主多从都可)
spring.shardingsphere.sharding.master-slave-rules.filedb1.master-data-source-name=master1
spring.shardingsphere.sharding.master-slave-rules.filedb1.load-balance-algorithm-type=round_robin
spring.shardingsphere.sharding.master-slave-rules.filedb1.slave-data-source-names=slave1

#打印日志
spring.shardingsphere.masterslave.props.sql.show=true
spring.shardingsphere.props.sql.show=true

#分表
spring.shardingsphere.sharding.tables.file_info.actual-data-nodes=filedb1.file_info$->{1..3}
# 以file_id列分表
spring.shardingsphere.sharding.tables.file_info.table-strategy.inline.sharding-column=file_id
# 内联分片算法(使用file_id % 3来分表)如果需要复杂的算法，使用下面的精确和范围分片算法
spring.shardingsphere.sharding.tables.file_info.table-strategy.inline.algorithm-expression=file_info$->{file_id % 3 + 1}
#范围分片算法
#spring.shardingsphere.sharding.tables.fileinfo.table-strategy.standard.sharding-column=file_id
#spring.shardingsphere.sharding.tables.fileinfo.table-strategy.standard.range-algorithm-class-name=com.solider76.oo.service.chat.config.MyShardingConfig
#精确分片算法
#spring.shardingsphere.sharding.tables.fileinfo.table-strategy.standard.sharding-column=file_id
#spring.shardingsphere.sharding.default-table-strategy.standard.precise-algorithm-class-name=-algorithm-class-name=com.solider76.oo.service.chat.config.MyShardingConfig


# 表主键生成算法
spring.shardingsphere.sharding.tables.file_info.key-generator.column=file_id
spring.shardingsphere.sharding.tables.file_info.key-generator.type=SNOWFLAKE

logging.level.com.fish.mapper=debug
