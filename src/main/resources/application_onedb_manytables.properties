# ==============================================分表不分库(1个库多个表)===================================================
# 1个库，一张表拆成了3张
# ======================================================================================================================

#默认数据源
spring.shardingsphere.sharding.default-data-source-name=filedb1
#数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names=filedb1
#数据源1
spring.shardingsphere.datasource.filedb1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.filedb1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.filedb1.url=jdbc:mysql://192.168.116.131:7786/filedb1?useUnicode\=true&characterEncoding\=utf-8&useSSL\=false&serverTimezone\=GMT&allowPublicKeyRetrieval\=true
spring.shardingsphere.datasource.filedb1.username=user1
spring.shardingsphere.datasource.filedb1.password=root
spring.shardingsphere.props.sql.show=true

#分表(如果select没有where条件，那么会从所有分表中查询)
spring.shardingsphere.sharding.tables.file_info.actual-data-nodes=filedb1.file_info$->{1..3}
# 以file_id列分表
spring.shardingsphere.sharding.tables.file_info.table-strategy.inline.sharding-column=file_id
# 内联分片算法(使用file_id % 2来分表)如果需要复杂的算法，使用精确和范围分片算法
spring.shardingsphere.sharding.tables.file_info.table-strategy.inline.algorithm-expression=file_info$->{file_id % 3 + 1}

# 表主键生成算法
spring.shardingsphere.sharding.tables.file_info.key-generator.column=file_id
spring.shardingsphere.sharding.tables.file_info.key-generator.type=SNOWFLAKE
# ======================================================================================================================


# mybatis-plus
mybatis-plus.type-aliases-package=com.fish.entity
mybatis-plus.mapper-locations=classpath*:com/fish/mapper/*.xml
mybatis-plus.global-config.db-config.id-type=auto
mybatis-plus.global-config.db-config.table-underline=true
#mybatis-plus.configuration.default-executor-type=reuse



logging.level.com.fish.mapper=debug
